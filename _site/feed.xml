<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-04-05T13:13:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NicoDora</title><subtitle>백엔드 개발을 중심으로 포스트 하고 있는 NicoDora의 블로그입니다.</subtitle><author><name>NicoDora</name></author><entry><title type="html">Docker 설치하기 for macOS</title><link href="http://localhost:4000/docker/2024/04/03/Docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-for-macOS.html" rel="alternate" type="text/html" title="Docker 설치하기 for macOS" /><published>2024-04-03T15:50:00+09:00</published><updated>2024-04-03T15:50:00+09:00</updated><id>http://localhost:4000/docker/2024/04/03/Docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-for-macOS</id><content type="html" xml:base="http://localhost:4000/docker/2024/04/03/Docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-for-macOS.html"><![CDATA[<ol id="markdown-toc">
  <li><a href="#docker란" id="markdown-toc-docker란">Docker란?</a></li>
  <li><a href="#macos에-docker-설치하기" id="markdown-toc-macos에-docker-설치하기">macOS에 Docker 설치하기</a></li>
  <li><a href="#마치며" id="markdown-toc-마치며">마치며</a></li>
</ol>

<h2 id="docker란">Docker란?</h2>

<p>도커(Docker)는 리눅스 컨테이너를 사용하여 애플리케이션을 더 쉽게 만들고 배포할 수 있도록 해주는 플랫폼입니다. 도커는 컨테이너 이미지를 사용하여 애플리케이션을 빌드하고 배포할 수 있습니다.
<br />
<br />
여기서 <b>컨테이너</b>는 격리된 환경에서 애플리케이션을 실행할 수 있도록 하는 기술입니다.<br />
컨테이너는 필요한 모든 라이브러리, 종속성 및 설정을 포함하는 격리된 패키지로서, 개발자는 개발 환경과 운영 환경 간의 일관성을 유지할 수 있습니다. 또한, 컨테이너는 빠르게 시작되고 쉽게 이동할 수 있어서 애플리케이션을 더 쉽게 배포하고 확장할 수 있습니다.
<br />
<br />
컨테이너 기술의 주요 장점은 다음과 같습니다.</p>
<ol>
  <li>
    <p><b>경량화</b><br />
   가상화된 운영 체제를 사용하는 가상 머신에 비해 더 적은 자원을 사용합니다.</p>
  </li>
  <li>
    <p><b>이식성</b><br />
   컨테이너는 호스트 시스템과 상관없이 동일한 방식으로 동작하므로 이식성이 뛰어납니다.</p>
  </li>
  <li>
    <p><b>일관성</b><br />
   컨테이너는 필요한 라이브러리 및 종속성을 포함하므로 환경이 일관되며, 개발 및 배포 과정이 표준화됩니다.</p>
  </li>
  <li>
    <p><b>확장성</b><br />
   컨테이너는 쉽게 배포되고 확장될 수 있어서 애플리케이션의 요구 사항에 따라 빠르게 조정할 수 있습니다.</p>
  </li>
</ol>

<p><br />
<br />
도커 로고를 보시면 고래가 그려져 있고 그 위에 컨테이너가 올려져 있는 모습을 볼 수 있습니다.<br />
<b>“바다 위에 배가 떠다니면서 그 위에 컨테이너를 올려 놓고 필요할 때마다 컨테이너에 접근하여 사용한다.”</b>라고 생각하시면 좋을 것 같습니다! 😊
<br />
<br />
<br />
<b>이미지</b>는 우리가 흔히 알고 있는 사진이나 그림 파일을 의미하는 것이 아니라, 컨테이너 실행에 필요한 파일과 설정 등을 포함하는 템플릿 입니다.
<br />
<br />
이미지는 값이 변하지 않는 정적인 파일이며, 컨테이너는 이미지를 실행한 상태입니다.<br />
때문에 컨테이너를 삭제하더라도 이미지는 영향을 받지 않고 그대로 남아있습니다.</p>

<p>또, 이미지에는 컨테이너를 실행하기 위해 필요한 모든 파일을 가지고 있기 때문에 복잡하게 이것저것 설정해주지 않아도 간편하게 컨테이너를 실행할 수 있으며, 하나의 이미지로 여러 개의 컨테이너를 실행할 수도 있습니다.</p>

<h2 id="macos에-docker-설치하기">macOS에 Docker 설치하기</h2>

<p>도커에 대한 설명은 간략하게 이 정도로 마치고, 이제 macOS에 도커를 설치해봅시다!</p>

<p><a href="https://www.docker.com/products/docker-desktop/">Docker 다운로드</a> 페이지에 접속하여 본인의 컴퓨터 환경에 맞춰 도커를 다운로드 받습니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-download-page.png" alt="Docker 다운로드 페이지" />
<br />
<br />
<br />
다운로드가 완료되었다면 다운로드 받은 <code class="language-plaintext highlighter-rouge">Docker.dmg</code>파일을 실행하여 설치를 진행합니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-install.png" alt="Docker 설치 화면" />
<br />
<br />
<br />
설치가 완료되면 ‘응용프로그램’에서 도커 앱이 추가된 것을 확인할 수 있습니다.</p>

<p>도커 앱을 실행해봅시다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-start.png" alt="Docker 앱 실행" />
<br />
<code class="language-plaintext highlighter-rouge">Accept</code>를 눌러 도커 약관에 동의하고 넘어갑니다.
<br />
<br />
<img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-setting.png" alt="Docker 초기 설정" />
<br />
초기 설정은 기본값(추천)으로 설정하고 <code class="language-plaintext highlighter-rouge">Finish</code>를 눌러 다음 단계로 넘어갑니다.
<br />
<br />
<img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-signin.png" alt="Docker 로그인" /></p>

<p>도커 허브 계정이 있다면 로그인을 하고, 없다면 스킵하셔도 됩니다.<br />
어짜피 도커는 계속 사용할테니 저는 계정을 새로 만들어서 로그인했습니다.
<br />
<br />
<br />
<img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-main.png" alt="Docker 메인화면" />
<br />
이제 도커 설치가 완료되었습니다!
<br />
<br />
<br />
터미널을 열어 아래 명령어를 입력하여 도커가 정상적으로 설치되었는지 확인해봅시다.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nt">--version</span>
</code></pre></div></div>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-version-check.png" alt="Docker 버전 확인" />
<br />
도커 버전이 출력된다면 정상적으로 설치완료 된 것입니다! 👍</p>

<h2 id="마치며">마치며</h2>

<p>오늘은 도커에 대해 알아보고 macOS에 도커를 설치해봤습니다.<br />
다음 포스트에서는 도커 이미지를 다운받은 후 컨테이너를 실행하고 관리하는 방법에 대해 알아보겠습니다.</p>

<p>그럼 다음 포스트에서 뵙겠습니다! 뾰로롱~
<br />
<br />
<img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/frieren1.gif" width="300" height="300" alt="프리렌 움짤1" /></p>]]></content><author><name>NicoDora</name></author><category term="docker" /><summary type="html"><![CDATA[Docker 컨테이너와 이미지에 대해 간단히 살펴보고 macOS환경에서 Docker를 설치해봅시다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-logo.png" /><media:content medium="image" url="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-04-03-Docker-설치하기-for-macOS/docker-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">NestJS 설치 및 시작하기</title><link href="http://localhost:4000/nestjs/2024/03/29/NestJS-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="NestJS 설치 및 시작하기" /><published>2024-03-29T09:57:00+09:00</published><updated>2024-03-29T09:57:00+09:00</updated><id>http://localhost:4000/nestjs/2024/03/29/NestJS-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/nestjs/2024/03/29/NestJS-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html"><![CDATA[<ol id="markdown-toc">
  <li><a href="#시작하기-전에" id="markdown-toc-시작하기-전에">시작하기 전에</a></li>
  <li><a href="#nestjs-설치하기" id="markdown-toc-nestjs-설치하기">NestJS 설치하기</a></li>
  <li><a href="#nestjs-기본-프로젝트-구조-살펴보기" id="markdown-toc-nestjs-기본-프로젝트-구조-살펴보기">NestJS 기본 프로젝트 구조 살펴보기</a></li>
  <li><a href="#프로젝트-실행하기" id="markdown-toc-프로젝트-실행하기">프로젝트 실행하기</a></li>
  <li><a href="#마치며" id="markdown-toc-마치며">마치며</a></li>
</ol>

<h2 id="시작하기-전에">시작하기 전에</h2>

<p>NestJS를 설치하기 위해서는 <span style="color:rgb(65, 126, 56)"><b>Node.js</b></span>와 <span style="color:#CC3534"><b>npm</b></span>이 설치되어 있어야 합니다. 만약 설치되어 있지 않다면 <a href="https://nodejs.org/en/download">Node.js 공식 홈페이지</a>에서 Node.js를 설치해주세요.<br />
(Node.js를 설치하면 npm도 함께 설치됩니다.)</p>

<p><br />
Node.js 공식 다운로드 페이지에 들어가면 아래와 같은 화면이 보이게 됩니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/nodejs-download-page.png" alt="Node.js 공식 홈페이지" /></p>

<p>LTS 버전과 Current 버전이 있는데, LTS 버전은 장기 지원되는 안정적인 버전이고 Current 버전은 최신 기능이 추가된 버전입니다.<br />
Current 버전에서는 예상치 못한 에러가 발생할 수 있으므로 보통은 LTS 버전을 권장합니다.</p>

<p>그 다음으로 본인이 사용중인 컴퓨터 환경을 선택하고 다운로드 해주시면 됩니다!</p>

<blockquote>
  <p>참고로 필자는 ARM 아키텍처를 사용한 애플 실리콘이 탑재된 macOS를 사용하고 있어 위 화면처럼 선택했습니다.</p>
</blockquote>

<p><br />
설치가 완료되었다면 터미널을 열어 아래 명령어를 입력해 Node.js와 npm이 정상적으로 설치되었는지 확인해봅시다.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># file: "terminal"</span>
node <span class="nt">-v</span>
</code></pre></div></div>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/node-version-check.png" width="500" alt="node 버전 확인" /></p>

<p><br /></p>
<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># file: "terminal"</span>
npm <span class="nt">-v</span>
</code></pre></div></div>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/npm-version-check.png" width="500" alt="npm 버전 확인" /></p>

<p><br />
명령어를 입력했을 때 Node.js와 npm의 버전이 출력된다면 정상적으로 설치가 완료된 것입니다.</p>

<p>그럼 이제 NestJS를 설치하러 가봅시다!
<br /></p>

<h2 id="nestjs-설치하기">NestJS 설치하기</h2>

<p><a href="https://docs.nestjs.com">NestJS 공식 문서</a>를 참고하여 해당 포스트를 작성하니 공식 문서를 함께 참고하시면서 따라와주세요. 😊</p>

<p><br />
먼저 NestJS를 설치할 디렉토리를 생성하고 해당 디렉토리로 이동합니다.</p>

<p>저는 간단하게 <code class="language-plaintext highlighter-rouge">nest-project</code>라는 이름으로 디렉토리를 생성해봤습니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/create-directory.png" width="500" alt="디렉토리 생성" />
<br />
<br />
<br />
그리고 해당 디렉토리 위치에서 아래 명령어를 입력해 <b>NestJS CLI</b><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>를 설치합니다.
<br />
<br /></p>
<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># file: "NestJS CLI 설치"</span>
npm i <span class="nt">-g</span> @nestjs/cli
</code></pre></div></div>

<blockquote>
  <p>여기서 <code class="language-plaintext highlighter-rouge">-g</code> 옵션은 글로벌 설치를 의미합니다. 글로벌 설치를 하게 되면 어디서든 해당 패키지를 사용할 수 있습니다.</p>
</blockquote>

<p><br />
NestJS CLI를 설치하고 <code class="language-plaintext highlighter-rouge">nest</code>명령어를 입력하면 아래와 같이 사용할 수 있는 명령어들이 출력됩니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/nest-command.png" alt="nest 명령어 확인" />
<br />
<br />
<br />
이제 <code class="language-plaintext highlighter-rouge">nest new {project-name}</code> 명령어를 통해 새로운 NestJS 프로젝트를 생성해봅시다.</p>

<p>필자는 <code class="language-plaintext highlighter-rouge">blog-nest</code>라는 이름으로 프로젝트를 생성해보겠습니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/nest-new-project.png" width="700" alt="nest new 명령어로 프로젝트 생성" /></p>

<p>패키지 매니저를 선택하라는 메시지가 나오는데 필자는 <code class="language-plaintext highlighter-rouge">npm</code>을 선택했습니다.<br />
(화살표 키를 이용해 선택하고 엔터키를 누르면 됩니다.)
<br />
<br />
<br /></p>

<p class="figcaption"><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/new-project-create-loading.png" width="700" alt="프로젝트 생성중" /><br />
프로젝트 생성중인 모습</p>

<p><br />
프로젝트 생성이 완료되면 아래와 같이 성공적으로 프로젝트가 생성되었다고 메세지가 출력되네요!</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/install-success.png" width="700" alt="프로젝트 생성 성공" /></p>

<p><br />
이제 <code class="language-plaintext highlighter-rouge">code .</code> 명령어를 통해 해당 프로젝트 디렉토리를 VSCode에서 열어 구조를 살펴보러 가봅시다.</p>

<h2 id="nestjs-기본-프로젝트-구조-살펴보기">NestJS 기본 프로젝트 구조 살펴보기</h2>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/open-vscode.png" width="300" alt="VSCode에서 프로젝트 열기" /></p>

<p>VSCode에서 자세히 살펴보면 위 사진처럼 <code class="language-plaintext highlighter-rouge">blog-nest</code>라는 프로젝트 디렉토리가 생성되었고, 그 안에 노드 모듈과 src/ 디렉토리 안에 NestJS의 핵심 파일이 생성된 것을 확인할 수 있습니다.</p>

<p><br /></p>
<pre><code class="language-none">nest-project
└─ blog-nest
   ├─ src
   │  ├─ app.controller.spec.ts
   │  ├─ app.controller.ts
   │  ├─ app.module.ts
   │  ├─ app.service.ts
   │  └─ main.ts
   ├─ test
   │  ├─ app.e2e-spec.ts
   │  └─ jest-e2e.json
   ├─ .eslintrc.js
   ├─ .prettierrc
   ├─ README.md
   ├─ nest-cli.json
   ├─ package-lock.json
   ├─ package.json
   ├─ tsconfig.build.json
   └─ tsconfig.json
</code></pre>
<p class="figcaption">project tree</p>

<p><br />
핵심 파일들의 간략한 개요:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">파일명</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">app.controller.ts</code></td>
      <td style="text-align: left">컨트롤러 파일로, 클라이언트의 요청을 받아 처리하는 역할을 합니다.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">app.controller.spec.ts</code></td>
      <td style="text-align: left">컨트롤러의 테스트 코드를 작성하는 파일입니다.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">app.module.ts</code></td>
      <td style="text-align: left">애플리케이션의 루트 모듈입니다.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">app.service.ts</code></td>
      <td style="text-align: left">서비스 파일로, 비즈니스 로직을 처리하는 역할을 합니다.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">main.ts</code></td>
      <td style="text-align: left">Nest 애플리케이션 인스턴스를 생성하기 위해 핵심 함수 <code class="language-plaintext highlighter-rouge">NestFactory</code>를 사용하는 애플리케이션의 엔트리 파일입니다.</td>
    </tr>
  </tbody>
</table>

<p><br />
NestJS로 프로젝트를 진행하기 위해선 반드시 Controller, Service, Module을 이해하고 있어야 합니다…!<br />
지금 모두 설명하기에는 무리가 있으니 이에 대한 자세한 내용은 다음 포스트에서 다루도록 하겠습니다.</p>

<h2 id="프로젝트-실행하기">프로젝트 실행하기</h2>

<p>이제 프로젝트를 실행해 볼텐데, <code class="language-plaintext highlighter-rouge">package.json</code> 파일을 열어봅시다.</p>

<p><br />
<img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/package-json-scripts.png" alt="package.json 파일" /></p>

<p><code class="language-plaintext highlighter-rouge">scripts</code> 부분을 보면 다양한 명령어들이 적혀있는데, <code class="language-plaintext highlighter-rouge">npm run</code>과 함께 해당 명령어를 입력하면 옵션에 따라 다르게 서버를 실행할 수 있습니다.</p>

<p>일단은 <code class="language-plaintext highlighter-rouge">npm run start:dev</code> 명령어를 입력해 개발 서버를 실행해봅시다.</p>

<p>dev 옵션으로 서버를 실행하면 파일이 변경될 때마다 자동으로 서버가 재시작됩니다.<br />
개발중에는 위 명령어를 사용하여 서버를 실행하는 것을 추천합니다.
<br />
<br />
<br />
혹시나 아래와 같은 에러가 발생한다면 <code class="language-plaintext highlighter-rouge">cd {프로젝트 이름}</code> 명령어를 통해 프로젝트 디렉토리 안으로 이동 한 후 명령어를 입력해주세요!</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/missing-script-error.png" alt="missing script error" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm ERR! Missing script: "start:dev"
npm ERR! 
npm ERR! To see a list of scripts, run:
npm ERR!   npm run

npm ERR! A complete log of this run can be found in: /Users/nicodora/.npm/_logs/2024-03-28T12_55_04_707Z-debug-0.log
</code></pre></div></div>
<p><br />
<br />
서버를 성공적으로 실행했다면 아래와 같이 서버가 정상적으로 실행되었다는 메세지가 출력됩니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/server-start-success.png" alt="서버 실행 성공" />
<br />
<br />
<br />
브라우저에서 <a href="http://localhost:3000"><code class="language-plaintext highlighter-rouge">http://localhost:3000</code></a> 혹은 <code class="language-plaintext highlighter-rouge">http://127.0.0.1:3000</code>으로 접속하면 아래와 같이 <code class="language-plaintext highlighter-rouge">Hello World!</code>라는 메세지가 출력되는 것을 확인할 수 있습니다.</p>

<p><img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/localhost.png" width="700" alt="localhost 접속" /></p>

<h2 id="마치며">마치며</h2>

<p>오늘은 NestJS를 설치하고 기본 구조를 살펴보며 <code class="language-plaintext highlighter-rouge">Hello World!</code>서버를 실행시켜봤습니다.
<br />
<br />
NestJS를 설치하고 단 한 줄의 코드를 작성하지 않았음에도 간단하게 서버를 구동할 수 있었습니다. 👍<br />
(역시 킹갓 NestJS 😎)</p>

<p>다음 포스트에서는 NestJS의 핵심인 Controller, Service, Module에 대해 자세히 알아보고 직접 코드를 작성해보는 시간을 갖도록 하겠습니다.</p>

<p>그럼 다음 포스트에서 뵙겠습니다! 뾰로롱~
<br />
<br />
<img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/frieren1.gif" width="300" height="300" alt="프리렌 움짤1" /></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>CLI(Command Line Interface)는 명령어를 통해 프로그램을 제어하는 인터페이스를 의미합니다. NestJS CLI는 NestJS 프로젝트를 생성하고 관리하는 명령어를 제공합니다. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>NicoDora</name></author><category term="nestjs" /><summary type="html"><![CDATA[NestJS를 설치하고 기본 구조를 살펴보며 NestJS를 사용해서 프로젝트를 시작해봅시다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/nestjs-logo.png" /><media:content medium="image" url="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-29-NestJS-설치-및-시작하기/nestjs-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">NestJS를 선택한 이유 (NestJS란?)</title><link href="http://localhost:4000/nestjs/2024/03/22/NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0.html" rel="alternate" type="text/html" title="NestJS를 선택한 이유 (NestJS란?)" /><published>2024-03-22T21:20:00+09:00</published><updated>2024-03-22T21:20:00+09:00</updated><id>http://localhost:4000/nestjs/2024/03/22/NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0</id><content type="html" xml:base="http://localhost:4000/nestjs/2024/03/22/NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0.html"><![CDATA[<ol id="markdown-toc">
  <li><a href="#nestjs란" id="markdown-toc-nestjs란">NestJS란?</a></li>
  <li><a href="#nestjs를-선택하기-전에" id="markdown-toc-nestjs를-선택하기-전에">NestJS를 선택하기 전에</a></li>
  <li><a href="#nestjs를-선택한-이유" id="markdown-toc-nestjs를-선택한-이유">NestJS를 선택한 이유</a></li>
  <li><a href="#지금부터는" id="markdown-toc-지금부터는">지금부터는</a></li>
</ol>

<h2 id="nestjs란">NestJS란?</h2>

<p>NestJS는 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기 위한 프레임워크입니다. 진보적인 자바스크립트를 사용하고, TypeScript로 구축되어 완전히 지원하며(순수 자바스크립트로도 가능), OOP(Object Oriented Programming)<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, FP(Functional Programming)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, FRP(Functional Reactive Programming)<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>의 요소를 결합합니다.</p>

<p>내부적으로 Nest는 Express(기본값)와 같은 강력한 HTTP 서버 프레임워크를 사용하며, 선택적으로 Fastify도 사용하도록 구성할 수 있습니다!</p>

<p>Nest는 이러한 일반적인 Node.js 프레임워크(Express/Fastify)보다 높은 수준의 추상화를 제공할 뿐만 아니라 개발자에게 직접 API를 노출합니다. 따라서 개발자는 기본 플랫폼에서 사용할 수 있는 수많은 타사 모듈을 자유롭게 사용할 수 있습니다.</p>

<p><i><a href="https://docs.nestjs.com/">공식 문서</a> 참고.</i>
<br /></p>

<h2 id="nestjs를-선택하기-전에">NestJS를 선택하기 전에</h2>

<p>Modern-Agile 6기 백엔드로 활동하며 메인 프로젝트(<span style="color:#FF772B">멘보샤 프로젝트</span>)를 진행하였습니다.</p>

<p>프로젝트를 진행할 때 어떤 프레임워크를 사용할지에 대해 백엔드 팀원분들과 논의를 하였고, 결론적으로는 NestJS를 사용하기로 결정하였습니다. 그렇다면 저희가 왜 NestJS를 사용하게 되었을까요? 지금부터 그 이유를 다시 생각해보며 끄적여보겠습니다.
<br />
<br />
먼저, 모던애자일은 웹개발을 하고 싶은 열정은 가지고 있지만 어떻게 시작해야할지 막막한 사람들을 위해 애자일 방법론을 기반으로 웹 개발을 함께 배우는 방법을 제시하는 전문 동아리 입니다.<br />
때문에 다른 사람들도 아직 백엔드를 할지 프론트엔드를 할지조차 정하지 못한 상태로 들어오는 경우가 많아 백,프론트 두 곳에서 모두 사용할 수 있는 javascript를 사용해서 코딩테스트를 풀며 언어에 익숙해지는 시간을 갖게 되는데, 그러다보니 자연스럽게 미니 프로젝트에서는 javascript를 사용하는 node.js기반의 Express 프레임워크를 채택하게 되었습니다.
<br />
<br />
이제, 메인 프로젝트를 진행해야하는 시간이 다가왔습니다.<br />
그동안에 Express를 사용해 왔었는데 메인 프로젝트를 진행할때는 다른 프레임워크를 사용할지 아니면 Express를 계속 사용할지에 대해 논의를 하였습니다.<br />
사실 ‘새로운 프레임워크를 배우면서 동시에 프로젝트에 적용하는게 힘들지 않을까?’ 라는 두려움에 Express를 계속 사용하고 싶었지만… Express를 사용하면서 느꼈던 불편함도 해결해보고 싶었고 새로운 기술을 배우며 프로그래밍에 대한 시야를 넓히고 싶었기에 새로운 프레임워크를 사용하기로 결정하였습니다.
<br />
<br />
<br /></p>
<blockquote>
  <p><b>Express를 사용하면서 느낀 가장 큰 단점은 “하나부터 열까지 개발자가 정하고 구현해야 한다” 였습니다.</b></p>
</blockquote>

<p><br />
Express는 제약이 없어 구조가 자유롭다는 장점이 있지만, 이는 개발자가 코드를 어떻게 구조화할지에 대한 명확한 가이드라인이 없다는 것을 의미합니다. 미니 프로젝트임에도 불구하고 디자인 패턴부터 에러 핸들링, 라이프사이클 관리까지 모든 것을 개발자가 스스로 정하고 구현해야 했기에 매우 귀찮고 힘들었습니다.
<br />
개발자가 개입할 수 있는 부분이 많다는 건 결국 개발자가 해야할 일이 많아지고 오류가 발생할 확률도 높아지는 것이니까요.</p>

<p>결국 위와 같은 이유로 Express는 프로젝트 규모가 커지면 사용하기 어렵다는 결론에 도달하게 되었습니다.
<br /></p>

<h2 id="nestjs를-선택한-이유">NestJS를 선택한 이유</h2>

<p>이제 Express의 단점을 보완시켜줄 프레임워크로 NestJS를 선택한 이유에 대해 설명드리겠습니다.</p>

<p><b>1. 구조화된 아키텍처</b><br />
NestJS는 Provider, Module, Controller, Service, Middleware, Pipe, Guard, Decorator, Filter, Exception Filter 등의 요소들을 제공하며, 이러한 요소들을 조합하여 구조화된 아키텍처를 구축할 수 있습니다. 이러한 구조화된 아키텍처는 프로젝트 규모가 커질수록 코드의 가독성과 유지보수성을 높여줍니다.<br />
기능 구현하기도 바쁜 저희 팀에게는 매우 큰 장점이 될 것이라고 생각되었습니다.
<br />
<br />
<b>2. TypeScript 사용</b><br />
NestJS는 TypeScript로 쓸 것을 가정하고 만들어진 프레임워크입니다. TypeScript를 사용하면 정적 타입 검사를 통해 런타임 에러를 줄일 수 있고, 코드의 가독성을 높일 수 있습니다.
<br />
<br />
<b>3. 잘 정리되어 있는 공식 문서</b><br />
처음에 데코레이터, 파이프, 프로바이더 등의 용어가 생소했지만, 공식 문서가 잘 정리되어 있다는 점에서 NestJS를 안심하고 선택할 수 있었던 것 같습니다.
<br />
<br />
결론적으로 NestJS를 사용하여 메인 프로젝트를 진행하게 된 것이 좋은 선택이었다고 생각합니다.</p>

<h2 id="지금부터는">지금부터는</h2>
<p><del>그 뒤는 안돼 임마!</del><br />
NestJS를 사용하여 프로젝트에서 제가 구현했던 기능들부터 다른 팀원분들이 구현했던 기능들도 직접 한번 구현해보면서<br />
차근차근 포스팅 해보겠습니다! 😊</p>

<p>그럼 다음 포스트에서 뵙겠습니다 뾰로롱~
<br />
<br />
<img src="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/frieren1.gif" width="300" height="300" alt="프리렌 움짤1" /></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>객체 지향 프로그래밍(Object Oriented Programming, OOP)은 컴퓨터 프로그래밍의 패러다임 중 하나로, 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고 데이터를 처리할 수 있다. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>함수형 프로그래밍(Functional Programming, FP)은 계산을 수학적 함수의 평가로 간주하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임이다. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>함수형 반응형 프로그래밍(Functional Reactive Programming, FRP)은 함수형 프로그래밍과 반응형 프로그래밍을 결합한 프로그래밍 패러다임이다. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>NicoDora</name></author><category term="nestjs" /><summary type="html"><![CDATA[NestJS가 무엇인지 알아보고 Modern-Agile 6기 메인 프로젝트에서 왜 NestJS를 채택했는지 알아봅시다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-22-NestJS를-선택한-이유/nestjs-logo.png" /><media:content medium="image" url="https://cdn.jsdelivr.net/gh/NicoDora/nicodora.github.io/assets/img/2024-03-22-NestJS를-선택한-이유/nestjs-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>